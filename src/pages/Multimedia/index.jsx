
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Helmet } from 'react-helmet';
import { Plus, Search, UploadCloud, Film, Loader2, AlertCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/use-toast';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger } from "@/components/ui/dialog";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import MediaForm from './MediaForm';
import MediaGrid from './MediaGrid';
import Lightbox from '@/components/Lightbox';
import FolderDetailDialog from './components/FolderDetailDialog';
import ImageGallery from './components/ImageGallery';
import { useMedia, useMediaForm, useMediaStats } from '@/hooks/useMedia';

const initialMediaItems = [
  { id: 1, type: 'image', name: '‡∏†‡∏≤‡∏û‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏á‡∏≤‡∏ô SACIT Symposium Day 1', event: 'SACIT Symposium 2025', date: '2025-08-08', thumbnailUrl: 'https://images.unsplash.com/photo-1542744173-8e7e53415bb0?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=300&q=80', status: 'published', coverImageUrl: 'https://images.unsplash.com/photo-1542744173-8e7e53415bb0?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80', themeColor: '#4A90E2', subtitle: '‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏û‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1', keywords: ['symposium', 'sacit', '‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£'], additionalMediaUrls: [] },
  { id: 2, type: 'video', name: '‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏≤‡∏ô SACIT Workshop', event: 'SACIT Workshop 2025', date: '2025-07-15', thumbnailUrl: 'https://images.unsplash.com/photo-1516321497487-e288fb19713f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=300&q=80', status: 'published', coverImageUrl: 'https://images.unsplash.com/photo-1516321497487-e288fb19713f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80', themeColor: '#F5A623', subtitle: '‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Ñ‡∏ä‡πá‡∏≠‡∏õ', keywords: ['workshop', 'sacit', '‡∏≠‡∏ö‡∏£‡∏°'], additionalMediaUrls: [] },
  { id: 3, type: 'image', name: '‡∏†‡∏≤‡∏û‡∏ú‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏á‡∏≤‡∏ô SACIT Conference', event: 'SACIT Conference 2025', date: '2025-09-20', thumbnailUrl: 'https://images.unsplash.com/photo-1556761175-5973dc0f32e7?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=300&q=80', status: 'draft', coverImageUrl: 'https://images.unsplash.com/photo-1556761175-5973dc0f32e7?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80', themeColor: '#7ED321', subtitle: '‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏≠‡∏ö', keywords: ['conference', '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•', 'sacit'], additionalMediaUrls: [] },
  { id: 4, type: 'folder', name: '‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢‡∏á‡∏≤‡∏ô SACIT Fair 2024', event: 'SACIT Fair 2024', date: '2024-11-10', itemsCount: 50, status: 'published', coverImageUrl: 'https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80', themeColor: '#BD10E0', subtitle: '‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏ü‡∏£‡πå', keywords: ['fair', 'sacit', '‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£'], additionalMediaUrls: [] },
];

const MEDIA_STORAGE_KEY = 'multimedia_v2';

const MultimediaPage = () => {
  const { toast } = useToast();
  
  // API hooks
  const { 
    media: mediaItems, 
    loading, 
    error, 
    pagination,
    fetchMedia,
    refreshMedia,
    setMedia 
  } = useMedia();
  
  const { deleteMedia } = useMediaForm();
  const { stats } = useMediaStats();

  // Local state
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState('all');
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editingMediaItem, setEditingMediaItem] = useState(null);
  const [deletingMediaItem, setDeletingMediaItem] = useState(null);
  const [lightboxImage, setLightboxImage] = useState(null);
  const [selectedFolder, setSelectedFolder] = useState(null);
  const [isFolderDetailOpen, setIsFolderDetailOpen] = useState(false);
  const [galleryImages, setGalleryImages] = useState([]);
  const [galleryIndex, setGalleryIndex] = useState(0);
  const [isGalleryOpen, setIsGalleryOpen] = useState(false);

  // Handle search and filter changes with debounce
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      const params = {};
      
      if (searchTerm) params.search = searchTerm;
      if (filterType !== 'all') params.type = filterType;
      
      console.log('üîç Applying filters:', params);
      fetchMedia(params);
    }, 300); // 300ms debounce

    return () => clearTimeout(timeoutId);
  }, [searchTerm, filterType]); // Remove fetchMedia from dependencies

  const handleAddMedia = () => {
    setEditingMediaItem(null);
    setIsFormOpen(true);
  };

  const handleEditMedia = (item) => {
    setEditingMediaItem(item);
    setIsFormOpen(true);
  };

  const handleDeleteMedia = (item) => {
    setDeletingMediaItem(item);
  };

  const confirmDelete = async () => {
    if (!deletingMediaItem) return;
    
    try {
      await deleteMedia(deletingMediaItem.id);
      refreshMedia();
      toast({ 
        title: "‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", 
        description: `‡∏™‡∏∑‡πà‡∏≠ "${deletingMediaItem.name}" ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß`, 
        variant: "destructive" 
      });
      setDeletingMediaItem(null);
    } catch (error) {
      toast({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö "${deletingMediaItem.name}" ‡πÑ‡∏î‡πâ: ${error.message}`,
        variant: "destructive",
      });
    }
  };

  const handleFormSubmit = (result) => {
    refreshMedia();
    setIsFormOpen(false);
    setEditingMediaItem(null);
    
    if (editingMediaItem) {
      toast({ 
        title: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", 
        description: `‡∏™‡∏∑‡πà‡∏≠ "${result.name}" ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß` 
      });
    } else {
      toast({ 
        title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", 
        description: `‡∏™‡∏∑‡πà‡∏≠ "${result.name}" ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß` 
      });
    }
  };

  const handleImageClick = (imageUrl, images, index) => {
    setGalleryImages(images);
    setGalleryIndex(index);
    setIsGalleryOpen(true);
  };

  const handlePreview = (item) => {
    if (item.type === 'image' && item.coverImageUrl) {
      setLightboxImage(item.coverImageUrl);
    } else if (item.type === 'folder') {
      setSelectedFolder(item);
      setIsFolderDetailOpen(true);
      toast({
        title: `üìÅ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå "${item.name}"`,
        description: `‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${item.itemsCount || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      });
    } else {
      toast({
        title: `üöß ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á "${item.name}"`,
        description: item.type === 'video' ? '‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤ ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ  üöÄ' : '‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤ ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ  üöÄ',
      });
    }
  };

  // No need for client-side filtering since API handles it
  const filteredMediaItems = mediaItems;

  return (
    <>
      <Helmet>
        <title>‡∏™‡∏∑‡πà‡∏≠‡∏°‡∏±‡∏•‡∏ï‡∏¥‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢ - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ SACIT</title>
        <meta name="description" content="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏™‡∏∑‡πà‡∏≠‡∏°‡∏±‡∏•‡∏ï‡∏¥‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏á‡∏≤‡∏ô" />
      </Helmet>
      <div className="space-y-6">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4"
        >
          <div>
            <h1 className="text-3xl font-bold text-gray-800">‡∏™‡∏∑‡πà‡∏≠‡∏°‡∏±‡∏•‡∏ï‡∏¥‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢</h1>
            <p className="text-gray-600 mt-1">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏™‡∏∑‡πà‡∏≠‡∏°‡∏±‡∏•‡∏ï‡∏¥‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏á‡∏≤‡∏ô</p>
            {stats && (
              <div className="flex items-center gap-4 mt-2 text-sm text-gray-500">
                <span>‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {stats.stats.total} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
                <span>‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß {stats.stats.published} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
                <span>‡πÅ‡∏ö‡∏ö‡∏£‡πà‡∏≤‡∏á {stats.stats.drafts} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
              </div>
            )}
          </div>
          <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
            <DialogTrigger asChild>
              <Button 
                className="add-button-gradient w-full sm:w-auto"
                onClick={handleAddMedia}
              >
                <UploadCloud className="w-5 h-5 mr-2" />
                ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏∑‡πà‡∏≠
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-2xl">
              <DialogHeader>
                <DialogTitle className="text-xl">{editingMediaItem ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏∑‡πà‡∏≠' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà'}</DialogTitle>
                <DialogDescription>
                  {editingMediaItem ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏∑‡πà‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á' : '‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà'}
                </DialogDescription>
              </DialogHeader>
              <MediaForm 
                mediaItem={editingMediaItem} 
                onSubmit={handleFormSubmit}
                onCancel={() => {
                  setIsFormOpen(false);
                  setEditingMediaItem(null);
                }}
              />
            </DialogContent>
          </Dialog>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
          className="bg-white p-4 sm:p-6 rounded-xl shadow-lg"
        >
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="relative flex-grow">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <Input
                type="text"
                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏∑‡πà‡∏≠ (‡∏ä‡∏∑‡πà‡∏≠, ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå, ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î)..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 pr-4 py-2.5 w-full bg-gray-50 border-gray-300 focus:border-violet-500 text-sm"
              />
            </div>
             <Select value={filterType} onValueChange={setFilterType}>
                <SelectTrigger className="w-full sm:w-[180px] bg-gray-50 border-gray-300 text-sm">
                  <SelectValue placeholder="‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</SelectItem>
                  <SelectItem value="image">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</SelectItem>
                  <SelectItem value="video">‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</SelectItem>
                  <SelectItem value="folder">‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå</SelectItem>
                </SelectContent>
              </Select>
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          {/* Error State */}
          {error && (
            <div className="text-center py-12 text-red-500 bg-red-50 rounded-xl border border-red-200">
              <AlertCircle className="w-16 h-16 mx-auto text-red-400 mb-4" />
              <p className="text-lg font-medium">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</p>
              <p className="text-sm mt-1">{error}</p>
              <Button 
                onClick={refreshMedia} 
                variant="outline" 
                className="mt-4"
              >
                ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
              </Button>
            </div>
          )}

          {/* Loading State */}
          {loading && !error && (
            <div className="text-center py-12 text-gray-500 bg-white rounded-xl shadow-lg">
              <Loader2 className="w-16 h-16 mx-auto text-gray-400 mb-4 animate-spin" />
              <p className="text-lg">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏∑‡πà‡∏≠‡∏°‡∏±‡∏•‡∏ï‡∏¥‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢...</p>
            </div>
          )}

          {/* Content State */}
          {!loading && !error && (
            <>
              {filteredMediaItems.length > 0 ? (
                <MediaGrid 
                  mediaItems={filteredMediaItems}
                  onEdit={handleEditMedia}
                  onDelete={handleDeleteMedia}
                  onPreview={handlePreview}
                />
              ) : (
                <div className="text-center py-12 text-gray-500 bg-white rounded-xl shadow-lg">
                  <Film className="w-16 h-16 mx-auto text-gray-400 mb-4" />
                  <p className="text-lg">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏∑‡πà‡∏≠‡∏°‡∏±‡∏•‡∏ï‡∏¥‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢</p>
                  <p className="text-sm mt-1">‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!</p>
                </div>
              )}
            </>
          )}
        </motion.div>
      </div>
      
      <Lightbox imageUrl={lightboxImage} onClose={() => setLightboxImage(null)} />
      
      <FolderDetailDialog
        isOpen={isFolderDetailOpen}
        onOpenChange={setIsFolderDetailOpen}
        folder={selectedFolder}
        onImageClick={handleImageClick}
      />

      <ImageGallery
        images={galleryImages}
        currentIndex={galleryIndex}
        isOpen={isGalleryOpen}
        onClose={() => setIsGalleryOpen(false)}
        onIndexChange={setGalleryIndex}
      />
      
      <AlertDialog open={!!deletingMediaItem} onOpenChange={(open) => !open && setDeletingMediaItem(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏∑‡πà‡∏≠</AlertDialogTitle>
            <AlertDialogDescription>
              ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏∑‡πà‡∏≠ "{deletingMediaItem?.name}"? ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setDeletingMediaItem(null)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</AlertDialogCancel>
            <AlertDialogAction onClick={confirmDelete} className="bg-red-600 hover:bg-red-700">‡∏•‡∏ö</AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
};

export default MultimediaPage;